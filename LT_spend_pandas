import pandas as pd
import numpy as np

#Gustavo Narez @ GNarez@weberpackaging.com 2023/2024
#Code to calculate Lead Time based on purchase order history and receipts

#Option to display all columns or rows
#pd.set_option('display.max_columns', None)
#pd.set_option('display.max_rows', None)

#Define the data types for columns. 'Item' for Cumulative LT dataframe dfLT
#dtypes = {'Organization Id': str, 'Item': str, 'Period Start Date': str, 'Item': str, 'Cumulative Lead Time': float}

#Function to parsing dates
def lookup(date_pd_series, format=None):
    """
    This is an extremely fast approach to datetime parsing.
    For large data, the same dates are often repeated. Rather than
    re-parse these, we store all unique dates, parse them, and
    use a lookup to convert all dates.
    """
    dates = {date: pd.to_datetime(date, format=format) for date in date_pd_series.unique()}
    return date_pd_series.map(dates)

columns_to_read = ['Item', 'Order Date', 'Receiving Date']  # Specify the column names you want to import
dtypes = {'Item': str}

#Get Cumulative LT dataframe and fill NaN with 0
filecsv = "spend_report_2022_and_forward.csv" #Add path

dfSR = pd.read_csv(filecsv, usecols=columns_to_read, header=0, encoding='ANSI', #removed , nrows=34000
                   low_memory=False, dtype=dtypes, index_col='Item')

#Parse columns to data type datetime64[ns]
dfSR['Order Date'] = lookup(dfSR['Order Date'], format='%m/%d/%Y')
dfSR['Receiving Date'] = lookup(dfSR['Receiving Date'], format='%m/%d/%Y')
dfSR['Order Date'] = pd.to_datetime(dfSR['Order Date'])
dfSR['Receiving Date'] = pd.to_datetime(dfSR['Receiving Date'] + pd.Timedelta(1, 'd'))

#dfSR.fillna(0, inplace=True)
#Get the unique values of 'Period Start Date' column
#unique_items = dfSR['Item'].unique()

# Convert dates to datetime64[D]
start_dates = dfSR['Order Date'].dt.date.values.astype('datetime64[D]')
end_dates = dfSR['Receiving Date'].dt.date.values.astype('datetime64[D]')

# Calculate business days using np.busday_count
dfSR['Delta Business Days'] = np.busday_count(start_dates, end_dates)
#print(dfSR)
#print(dfSR.dtypes)

# Group by 'Item' and calculate the average
#dfSRAve = dfSR.groupby('Item')['Delta Business Days'].mean().reset_index()
dfSRAve = dfSR.groupby('Item')['Delta Business Days'].mean().round(0).reset_index()

# Rename the columns
dfSRAve.columns = ['Item', 'Average Delta Business Days']

#Filter for certain item
#print(dfSRAve.loc[dfSRAve['Item'] == '54800'])

print(dfSRAve)
dfSRAve.to_csv("dfSR_Export.csv", index=True) #Add path
